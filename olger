#!/bin/sh
set -e

PROGNAME=$(basename $0)

die() {
    echo "$PROGNAME: $*" >&2
    exit 1
}

usage() {
    if [ "$*" != "" ] ; then
        echo "Error: $*"
    fi

    cat << EOF

Usage: $PROGNAME [OPTION ...] [foo] [bar]
Olger a Red Team tool with ansible playbooks to repair things , D3.js Graph visualization, metasploit and shodan

Options:

-h, --help          display this usage message and exit

-n, --genfromnmap  [RANGE] [MISSION]     delete things

-f, --genfromfile [FILE] generate a graph from nmap xml file

-s, --genfromshodan [QUERY] write output to file

-m, --msfconsole [EXPLOIT_CHECK] [PAYLOAD] [CMD] [LIST] execute msf command for each input in the list

-r, --report [MISSION] write output to file in pdf and dot format

-q, --query [DIR] [QUERY] make querys over raw json or csv data (not ready)


EOF

    exit 1
}

foo=""
bar=""
delete=0
output="-"
while [ $# -gt 0 ] ; do
    case "$1" in
    -h|--help)
        usage
        ;;
    -n|--genfromnmap)
            #scan with nmap an save the results
            nmap -sV -A $2 -oX data/nmap$3.xml

            #convert the results to json
            python3 ./bin/converter.py data/nmap$3.xml data/nmap$3.xml.json
            #process the data to a json d3 graph
            python scripts/olger_lib.py data/nmap$3.xml.json > reports/report$3.txt
            #execute the web visualizer server
            cd web
            python3 -m http.server
        ;;

    -f|--genfromfile)
            #convert the results to json
            python3 ./bin/converter.py $3 data/nmap$3.xml.json
            #process the data to a json d3 graph
            python scripts/olger_lib.py data/nmap$3.xml.json > reports/report$3.txt
            #execute the web visualizer server
            cd web
            python3 -m http.server
        ;;
    -r|--report)
        
            #convert graph to a pdf and dot files
            node scripts/graphpdf.js $1 | dot -Tpdf > ~/reports/$2/report$2.pdf
            node scripts/graphpdf.js $1 > ./data.dot && xdot ./reports/$2/data$2.dot  

        ;;
    -m|--msfconsole)
            #aply metasploit execution to each argument in the list
            python3 scripts/olger_msfconsole.py $2 $3 $4 $5

        ;;

    -s|--genfromshodan)

            #generate shodan graph and files, you can use this files to launch masive security checks over infrastructures, the shodan list in csv format will be saved in lists forlder            
            node scripts/shodan.js $2
            echo "you can find the output in lists/$2 launch "

        shift
        ;;
    -*)
        usage "Unknown option '$1'"
        ;;
    *)
        if [ -z "$foo" ] ; then
            foo="$1"
        elif [ -z "$bar" ] ; then
            bar="$1"
        else
            usage "Too many arguments"
        fi
        ;;
    esac
    shift
done

if [ -z "$bar" ] ; then
    usage "Not enough arguments"
fi

cat <<EOF
foo=$foo
bar=$bar
delete=$delete
output=$output
EOF


if [ $# == 0 ]; then
    echo "Usage: $0 ip-range report_name"
    echo "* param1 example: 192.168.0.1-255"
    echo "* param2 example: home"
fi
#scan with nmap an save the results
nmap -sV -A $1 -oX data/nmap$2.xml

#convert the results to json
python3 ./bin/converter.py data/nmap$2.xml data/nmap$2.xml.json
#process the data to a json d3 graph
python scripts/olger_lib.py data/nmap$2.xml.json > reports/report$2.txt
#execute the web visualizer server
cd web
python3 -m http.server
